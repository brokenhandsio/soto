//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2021 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto/tree/main/CodeGenerator. DO NOT EDIT.

@_exported import SotoCore

/// Service object for interacting with AWS SSMIncidents service.
///
/// AWS Systems Manager Incident Manager is an incident management console designed to help users mitigate and recover from incidents affecting their AWS-hosted applications. An incident is any unplanned interruption or reduction in quality of services.  Incident Manager increases incident resolution by notifying responders of impact, highlighting relevant troubleshooting data, and providing collaboration tools to get services back up and running. To achieve the primary goal of reducing the time-to-resolution of critical incidents, Incident Manager automates response plans and enables responder team escalation.
public struct SSMIncidents: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the SSMIncidents client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - timeout: Timeout value for HTTP requests
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            service: "ssm-incidents",
            serviceProtocol: .restjson,
            apiVersion: "2018-05-10",
            endpoint: endpoint,
            errorType: SSMIncidentsErrorType.self,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }

    // MARK: API Calls

    /// A replication set replicates and encrypts your data to the provided Regions with the provided KMS key.
    public func createReplicationSet(_ input: CreateReplicationSetInput, context: LoggingContext, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateReplicationSetOutput> {
        return self.client.execute(operation: "CreateReplicationSet", path: "/createReplicationSet", httpMethod: .POST, serviceConfig: self.config, input: input, context: context, on: eventLoop)
    }

    /// Creates a response plan that automates the initial response to incidents. A response plan engages contacts, starts chat channel collaboration, and initiates runbooks at the beginning of an incident.
    public func createResponsePlan(_ input: CreateResponsePlanInput, context: LoggingContext, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateResponsePlanOutput> {
        return self.client.execute(operation: "CreateResponsePlan", path: "/createResponsePlan", httpMethod: .POST, serviceConfig: self.config, input: input, context: context, on: eventLoop)
    }

    /// Creates a custom timeline event on the incident details page of an incident record. Timeline events are automatically created by Incident Manager, marking key moment during an incident. You can create custom timeline events to mark important events that are automatically detected by Incident Manager.
    public func createTimelineEvent(_ input: CreateTimelineEventInput, context: LoggingContext, on eventLoop: EventLoop? = nil) -> EventLoopFuture<CreateTimelineEventOutput> {
        return self.client.execute(operation: "CreateTimelineEvent", path: "/createTimelineEvent", httpMethod: .POST, serviceConfig: self.config, input: input, context: context, on: eventLoop)
    }

    /// Delete an incident record from Incident Manager.
    public func deleteIncidentRecord(_ input: DeleteIncidentRecordInput, context: LoggingContext, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteIncidentRecordOutput> {
        return self.client.execute(operation: "DeleteIncidentRecord", path: "/deleteIncidentRecord", httpMethod: .POST, serviceConfig: self.config, input: input, context: context, on: eventLoop)
    }

    /// Deletes all Regions in your replication set. Deleting the replication set deletes all Incident Manager data.
    public func deleteReplicationSet(_ input: DeleteReplicationSetInput, context: LoggingContext, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteReplicationSetOutput> {
        return self.client.execute(operation: "DeleteReplicationSet", path: "/deleteReplicationSet", httpMethod: .POST, serviceConfig: self.config, input: input, context: context, on: eventLoop)
    }

    /// Deletes the resource policy that AWS Resource Access Manager uses to share your Incident Manager resource.
    public func deleteResourcePolicy(_ input: DeleteResourcePolicyInput, context: LoggingContext, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteResourcePolicyOutput> {
        return self.client.execute(operation: "DeleteResourcePolicy", path: "/deleteResourcePolicy", httpMethod: .POST, serviceConfig: self.config, input: input, context: context, on: eventLoop)
    }

    /// Deletes the specified response plan. Deleting a response plan stops all linked CloudWatch alarms and EventBridge events from creating an incident with this response plan.
    public func deleteResponsePlan(_ input: DeleteResponsePlanInput, context: LoggingContext, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteResponsePlanOutput> {
        return self.client.execute(operation: "DeleteResponsePlan", path: "/deleteResponsePlan", httpMethod: .POST, serviceConfig: self.config, input: input, context: context, on: eventLoop)
    }

    /// Deletes a timeline event from an incident.
    public func deleteTimelineEvent(_ input: DeleteTimelineEventInput, context: LoggingContext, on eventLoop: EventLoop? = nil) -> EventLoopFuture<DeleteTimelineEventOutput> {
        return self.client.execute(operation: "DeleteTimelineEvent", path: "/deleteTimelineEvent", httpMethod: .POST, serviceConfig: self.config, input: input, context: context, on: eventLoop)
    }

    /// Returns the details of the specified incident record.
    public func getIncidentRecord(_ input: GetIncidentRecordInput, context: LoggingContext, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetIncidentRecordOutput> {
        return self.client.execute(operation: "GetIncidentRecord", path: "/getIncidentRecord", httpMethod: .GET, serviceConfig: self.config, input: input, context: context, on: eventLoop)
    }

    /// Retrieve your Incident Manager replication set.
    public func getReplicationSet(_ input: GetReplicationSetInput, context: LoggingContext, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetReplicationSetOutput> {
        return self.client.execute(operation: "GetReplicationSet", path: "/getReplicationSet", httpMethod: .GET, serviceConfig: self.config, input: input, context: context, on: eventLoop)
    }

    /// Retrieves the resource policies attached to the specified response plan.
    public func getResourcePolicies(_ input: GetResourcePoliciesInput, context: LoggingContext, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetResourcePoliciesOutput> {
        return self.client.execute(operation: "GetResourcePolicies", path: "/getResourcePolicies", httpMethod: .POST, serviceConfig: self.config, input: input, context: context, on: eventLoop)
    }

    /// Retrieves the details of the specified response plan.
    public func getResponsePlan(_ input: GetResponsePlanInput, context: LoggingContext, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetResponsePlanOutput> {
        return self.client.execute(operation: "GetResponsePlan", path: "/getResponsePlan", httpMethod: .GET, serviceConfig: self.config, input: input, context: context, on: eventLoop)
    }

    /// Retrieves a timeline event based on its ID and incident record.
    public func getTimelineEvent(_ input: GetTimelineEventInput, context: LoggingContext, on eventLoop: EventLoop? = nil) -> EventLoopFuture<GetTimelineEventOutput> {
        return self.client.execute(operation: "GetTimelineEvent", path: "/getTimelineEvent", httpMethod: .GET, serviceConfig: self.config, input: input, context: context, on: eventLoop)
    }

    /// Lists all incident records in your account. Use this command to retrieve the Amazon Resource Name (ARN) of the incident record you want to update.
    public func listIncidentRecords(_ input: ListIncidentRecordsInput, context: LoggingContext, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ListIncidentRecordsOutput> {
        return self.client.execute(operation: "ListIncidentRecords", path: "/listIncidentRecords", httpMethod: .POST, serviceConfig: self.config, input: input, context: context, on: eventLoop)
    }

    /// List all related items for an incident record.
    public func listRelatedItems(_ input: ListRelatedItemsInput, context: LoggingContext, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ListRelatedItemsOutput> {
        return self.client.execute(operation: "ListRelatedItems", path: "/listRelatedItems", httpMethod: .POST, serviceConfig: self.config, input: input, context: context, on: eventLoop)
    }

    /// Lists details about the replication set configured in your account.
    public func listReplicationSets(_ input: ListReplicationSetsInput, context: LoggingContext, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ListReplicationSetsOutput> {
        return self.client.execute(operation: "ListReplicationSets", path: "/listReplicationSets", httpMethod: .POST, serviceConfig: self.config, input: input, context: context, on: eventLoop)
    }

    /// Lists all response plans in your account.
    public func listResponsePlans(_ input: ListResponsePlansInput, context: LoggingContext, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ListResponsePlansOutput> {
        return self.client.execute(operation: "ListResponsePlans", path: "/listResponsePlans", httpMethod: .POST, serviceConfig: self.config, input: input, context: context, on: eventLoop)
    }

    /// Lists the tags that are attached to the specified response plan.
    public func listTagsForResource(_ input: ListTagsForResourceRequest, context: LoggingContext, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ListTagsForResourceResponse> {
        return self.client.execute(operation: "ListTagsForResource", path: "/tags/{resourceArn}", httpMethod: .GET, serviceConfig: self.config, input: input, context: context, on: eventLoop)
    }

    /// Lists timeline events of the specified incident record.
    public func listTimelineEvents(_ input: ListTimelineEventsInput, context: LoggingContext, on eventLoop: EventLoop? = nil) -> EventLoopFuture<ListTimelineEventsOutput> {
        return self.client.execute(operation: "ListTimelineEvents", path: "/listTimelineEvents", httpMethod: .POST, serviceConfig: self.config, input: input, context: context, on: eventLoop)
    }

    /// Adds a resource policy to the specified response plan.
    public func putResourcePolicy(_ input: PutResourcePolicyInput, context: LoggingContext, on eventLoop: EventLoop? = nil) -> EventLoopFuture<PutResourcePolicyOutput> {
        return self.client.execute(operation: "PutResourcePolicy", path: "/putResourcePolicy", httpMethod: .POST, serviceConfig: self.config, input: input, context: context, on: eventLoop)
    }

    /// Used to start an incident from CloudWatch alarms, EventBridge events, or manually.
    public func startIncident(_ input: StartIncidentInput, context: LoggingContext, on eventLoop: EventLoop? = nil) -> EventLoopFuture<StartIncidentOutput> {
        return self.client.execute(operation: "StartIncident", path: "/startIncident", httpMethod: .POST, serviceConfig: self.config, input: input, context: context, on: eventLoop)
    }

    /// Adds a tag to a response plan.
    public func tagResource(_ input: TagResourceRequest, context: LoggingContext, on eventLoop: EventLoop? = nil) -> EventLoopFuture<TagResourceResponse> {
        return self.client.execute(operation: "TagResource", path: "/tags/{resourceArn}", httpMethod: .POST, serviceConfig: self.config, input: input, context: context, on: eventLoop)
    }

    /// Removes a tag from a resource.
    public func untagResource(_ input: UntagResourceRequest, context: LoggingContext, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UntagResourceResponse> {
        return self.client.execute(operation: "UntagResource", path: "/tags/{resourceArn}", httpMethod: .DELETE, serviceConfig: self.config, input: input, context: context, on: eventLoop)
    }

    /// Update deletion protection to either allow or deny deletion of the final Region in a replication set.
    public func updateDeletionProtection(_ input: UpdateDeletionProtectionInput, context: LoggingContext, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateDeletionProtectionOutput> {
        return self.client.execute(operation: "UpdateDeletionProtection", path: "/updateDeletionProtection", httpMethod: .POST, serviceConfig: self.config, input: input, context: context, on: eventLoop)
    }

    /// Update the details of an incident record. You can use this action to update an incident record from the defined chat channel. For more information about using actions in chat channels, see Interacting through chat.
    public func updateIncidentRecord(_ input: UpdateIncidentRecordInput, context: LoggingContext, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateIncidentRecordOutput> {
        return self.client.execute(operation: "UpdateIncidentRecord", path: "/updateIncidentRecord", httpMethod: .POST, serviceConfig: self.config, input: input, context: context, on: eventLoop)
    }

    /// Add or remove related items from the related items tab of an incident record.
    public func updateRelatedItems(_ input: UpdateRelatedItemsInput, context: LoggingContext, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateRelatedItemsOutput> {
        return self.client.execute(operation: "UpdateRelatedItems", path: "/updateRelatedItems", httpMethod: .POST, serviceConfig: self.config, input: input, context: context, on: eventLoop)
    }

    /// Add or delete Regions from your replication set.
    public func updateReplicationSet(_ input: UpdateReplicationSetInput, context: LoggingContext, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateReplicationSetOutput> {
        return self.client.execute(operation: "UpdateReplicationSet", path: "/updateReplicationSet", httpMethod: .POST, serviceConfig: self.config, input: input, context: context, on: eventLoop)
    }

    /// Updates the specified response plan.
    public func updateResponsePlan(_ input: UpdateResponsePlanInput, context: LoggingContext, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateResponsePlanOutput> {
        return self.client.execute(operation: "UpdateResponsePlan", path: "/updateResponsePlan", httpMethod: .POST, serviceConfig: self.config, input: input, context: context, on: eventLoop)
    }

    /// Updates a timeline event. You can update events of type Custom Event.
    public func updateTimelineEvent(_ input: UpdateTimelineEventInput, context: LoggingContext, on eventLoop: EventLoop? = nil) -> EventLoopFuture<UpdateTimelineEventOutput> {
        return self.client.execute(operation: "UpdateTimelineEvent", path: "/updateTimelineEvent", httpMethod: .POST, serviceConfig: self.config, input: input, context: context, on: eventLoop)
    }
}

extension SSMIncidents {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are no public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: SSMIncidents, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}
