{{%CONTENT_TYPE:TEXT}}
{{>header}}

@_exported import SotoCore

import SotoCore

// MARK: Waiters

extension {{name}} {
{{#waiters}}
    /// Poll resource until it reaches a desired state
    ///
    /// Parameters:
    ///   - input: Input for request
    ///   - maxWaitTime: Maximum amount of time to wait for waiter to be successful
    ///   - context: LoggingContext used for instrumentation
    ///   - eventLoop: EventLoop to run waiter code on
    public func waitUntil{{waiterName}}(
        _ input: {{operation.inputShape}},
        maxWaitTime: TimeAmount? = nil,
        context: LoggingContext,
        on eventLoop: EventLoop? = nil
    ) -> EventLoopFuture<Void> {
        let waiter = AWSClient.Waiter(
            acceptors: [
{{#acceptors}}
{{#matcher.jmesPath}}
                .init(state: .{{state}}, matcher: try! JMESPathMatcher("{{path}}", expected: {{expected}})),
{{/matcher.jmesPath}}
{{#matcher.jmesAnyPath}}
                .init(state: .{{state}}, matcher: try! JMESAnyPathMatcher("{{path}}", expected: {{expected}})),
{{/matcher.jmesAnyPath}}
{{#matcher.jmesAllPath}}
                .init(state: .{{state}}, matcher: try! JMESAllPathMatcher("{{path}}", expected: {{expected}})),
{{/matcher.jmesAllPath}}
{{#matcher.error}}
                .init(state: .{{state}}, matcher: AWSErrorCodeMatcher("{{.}}")),
{{/matcher.error}}
{{#matcher.errorStatus}}
                .init(state: .{{state}}, matcher: AWSErrorStatusMatcher({{.}})),
{{/matcher.errorStatus}}
{{#matcher.success}}
                .init(state: .{{state}}, matcher: AWSSuccessMatcher()),
{{/matcher.success}}
{{/acceptors}}
            ],
{{#minDelayTime}}
            minDelayTime: .seconds({{.}}),
{{/minDelayTime}}
{{#maxDelayTime}}
            maxDelayTime: .seconds({{.}}),
{{/maxDelayTime}}
            command: {{operation.funcName}}
        )
        return self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, context: context, on: eventLoop)
    }
{{#last()}}

{{/last()}}
{{/waiters}}
}
